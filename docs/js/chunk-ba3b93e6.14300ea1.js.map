{"version":3,"sources":["webpack://frontend-park-[name]/./src/views/three/dat.gui.vue?b6b9","webpack://frontend-park-[name]/./src/views/three/dat.gui.vue?dbf8","webpack://frontend-park-[name]/src/views/three/dat.gui.vue","webpack://frontend-park-[name]/./src/views/three/dat.gui.vue?4b97","webpack://frontend-park-[name]/./src/views/three/dat.gui.vue"],"names":["render","_vm","this","_h","$createElement","_self","_c","_m","staticRenderFns","staticClass","attrs","component"],"mappings":"8IAAA,W,2CCAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAsBH,EAAII,MAAMC,GAAO,OAAOL,EAAIM,GAAG,IACnGC,EAAkB,CAAC,WAAa,IAAIP,EAAIC,KAASC,EAAGF,EAAIG,eAAmBE,EAAGL,EAAII,MAAMC,IAAIH,EAAG,OAAOG,EAAG,MAAM,CAACG,YAAY,kBAAkB,CAACH,EAAG,MAAM,CAACI,MAAM,CAAC,GAAK,sB,4DCWzK,GACE,WAAF,GACE,MAAF,GACE,KAHF,WAII,MAAJ,CACM,MAAN,KACM,OAAN,KACM,IAAN,KACM,SAAN,KACM,MAAN,KACM,KAAN,KACM,OAAN,KACM,QAAN,KACM,QAAN,KACM,iBAAN,CACQ,QAAR,WACQ,UAAR,IACQ,mBAAR,IACQ,mBAAR,IACQ,UAAR,EACQ,OANR,WAOU,MAAV,eAEQ,aAAR,aAIE,SAAF,GACE,MAAF,GACE,QA7BF,aA8BE,QA9BF,WA+BI,KAAJ,OACI,KAAJ,UACI,KAAJ,aAEE,iBAnCF,SAmCA,OACI,QAAJ,SACI,KAAJ,oCACI,KAGF,QAAF,CACI,KADJ,WAGM,KAAN,qBAKM,KAAN,kCACA,GACA,0CACA,GACA,KAIM,KAAN,aAEM,KAAN,cAEM,KAAN,cAEM,KAAN,iBACM,KAAN,WAEM,KAAN,oBACA,WACA,CACQ,KAAR,cACQ,UAAR,SAEA,CAAQ,KAAR,sBAAQ,QAAR,CAAU,MAAV,WACA,CACQ,SAAR,QACQ,YAAR,IAGM,KAAN,iBAEM,KAAN,sBACA,WACA,CACQ,KAAR,iBACQ,UAAR,WAEA,CAAQ,KAAR,sBAAQ,QAAR,CAAU,MAAV,UACA,CACQ,SAAR,WACQ,YAAR,IAGM,KAAN,uBACA,WACA,CACQ,KAAR,iBACQ,UAAR,WAEA,CAAQ,KAAR,sBAAQ,QAAR,CAAU,MAAV,eACA,CACQ,SAAR,SACQ,YAAR,IAGM,KAAN,iBAGI,cAlEJ,WAmEM,KAAN,uBACA,WACA,CACQ,KAAR,iBACQ,UAAR,WAEA,CACQ,KAAR,sBACQ,QAAR,CAAU,MAAV,qCAEA,CACQ,SAAR,SACQ,YAAR,KAKI,eApFJ,WAqFM,KAAN,gCAEM,KAAN,0CAEM,KAAN,0DAEM,KAAN,iCAEM,KAAN,mCAEM,KAAN,8BAEM,SAAN,qEAEM,KAAN,yCAGI,YAtGJ,WAyGM,KAAN,uCAEM,KAAN,kCAEM,KAAN,wBAEM,KAAN,2BAGI,WAlHJ,WAoHM,KAAN,6BAEM,KAAN,sBAGI,YAzHJ,WA2HM,IAAN,kCAEA,gCACQ,MAAR,WAGM,KAAN,yBAEM,KAAN,6BAEM,KAAN,0BAEM,KAAN,uBAEM,KAAN,uBAII,QA7IJ,WA+IM,KAAN,iDACM,KAAN,iDACM,KAAN,iDAKM,KAAN,8EACM,KAAN,wEACM,KAAN,wEAEM,KAAN,4EACM,KAAN,4EAEM,KAAN,4EACM,KAAN,4EACM,KAAN,wCACM,sBAAN,eAGI,UAnKJ,WAmKM,IAAN,OAUM,KAAN,eAEM,KAAN,yCACM,KAAN,gDACM,KAAN,yDACM,KAAN,wDACM,KAAN,0CACM,KAAN,mDAQM,IAAN,6BACA,kEAEM,EAAN,OAKM,KAAN,6DAEM,EAAN,4BACQ,QAAR,sBAEQ,EAAR,wBACQ,EAAR,oBAII,SA9MJ,WA+MM,IAAN,QAIM,SAAN,IACQ,EAAR,QAEQ,EAAR,MACQ,sBAAR,GAPM,EAAN,aACM,SAAN,oDACM,EAAN,yDAOM,sBAAN,MC9QgW,I,wBCQ5VC,EAAY,eACd,EACAX,EACAQ,GACA,EACA,KACA,WACA,MAIa,aAAAG,E","file":"js/chunk-ba3b93e6.14300ea1.js","sourcesContent":["export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./dat.gui.vue?vue&type=style&index=0&id=183fea19&scoped=true&lang=scss&\"","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"page-container\"},[_c('div',{attrs:{\"id\":\"webgl-output\"}})])}]\n\nexport { render, staticRenderFns }","<template>\r\n    <div class=\"page-container\">\r\n        <div id=\"webgl-output\"></div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport * as THREE from \"three\";\r\nimport * as dat from \"dat.gui\";\r\nimport * as Stats from \"stats.js\";\r\n\r\nimport createGeometry from \"./utils/createGeometry\";\r\nexport default {\r\n    components: {},\r\n    props: {},\r\n    data() {\r\n        return {\r\n            scene: null,\r\n            camera: null,\r\n            gui: null,\r\n            renderer: null,\r\n            plane: null,\r\n            cube: null,\r\n            sphere: null,\r\n            sphere2: null,\r\n            sphere3: null,\r\n            guiConfiguration: {\r\n                message: \"哈喽啊~我是荣顶\",\r\n                cubeSpeed: 0.03,\r\n                sphereInitVelocity: 0.03,\r\n                sphereAcceleration: 0.04,\r\n                checkBox: false,\r\n                button() {\r\n                    alert(\"关注公众号：前端超人\");\r\n                },\r\n                sphere3Color: \"#ffae23\",\r\n            },\r\n        };\r\n    },\r\n    computed: {},\r\n    watch: {},\r\n    created() {},\r\n    mounted() {\r\n        this.init();\r\n        this.animate();\r\n        this.configGUI();\r\n    },\r\n    beforeRouteLeave(to, from, next) {\r\n        console.log(123);\r\n        this.gui.domElement.style.display = \"none\";\r\n        next();\r\n    },\r\n\r\n    methods: {\r\n        init() {\r\n            //定义场景\r\n            this.scene = new THREE.Scene();\r\n            //给场景添加雾化效果\r\n            // this.scene.fog = new THREE.Fog(0x123, 5, 10);\r\n            // this.scene.fog = new THREE.FogExp2(0xffffff, 0.004);\r\n            //定义摄像机\r\n            this.camera = new THREE.PerspectiveCamera(\r\n                45,\r\n                window.innerWidth / (window.innerHeight - 60),\r\n                0.1,\r\n                1000,\r\n            );\r\n\r\n            //创建坐标系\r\n            this.createAxes();\r\n            //创建平面\r\n            this.createPlane();\r\n            //创建光源\r\n            this.createLight();\r\n            //创建渲染器,放最后\r\n            this.createRenderer();\r\n            this.getStats();\r\n            //创建立方体\r\n            this.cube = createGeometry(\r\n                this.scene,\r\n                {\r\n                    type: \"BoxGeometry\",\r\n                    attribute: [5, 5, 5],\r\n                },\r\n                { type: \"MeshLambertMaterial\", options: { color: 0xff0000 } },\r\n                {\r\n                    position: [0, 4, 0],\r\n                    castShadow: true,\r\n                },\r\n            );\r\n            this.cube.name = \"cube\";\r\n            //创建球体\r\n            this.sphere = createGeometry(\r\n                this.scene,\r\n                {\r\n                    type: \"SphereGeometry\",\r\n                    attribute: [3, 20, 20],\r\n                },\r\n                { type: \"MeshLambertMaterial\", options: { color: 0x7777ff } },\r\n                {\r\n                    position: [-15, 3, 10],\r\n                    castShadow: true,\r\n                },\r\n            );\r\n            this.sphere2 = createGeometry(\r\n                this.scene,\r\n                {\r\n                    type: \"SphereGeometry\",\r\n                    attribute: [1, 20, 20],\r\n                },\r\n                { type: \"MeshLambertMaterial\", options: { color: \"lightgreen\" } },\r\n                {\r\n                    position: [20, 1, 0],\r\n                    castShadow: true,\r\n                },\r\n            );\r\n            this.createSphere3();\r\n        },\r\n        \r\n        createSphere3() {\r\n            this.sphere3 = createGeometry(\r\n                this.scene,\r\n                {\r\n                    type: \"SphereGeometry\",\r\n                    attribute: [8, 20, 20],\r\n                },\r\n                {\r\n                    type: \"MeshLambertMaterial\",\r\n                    options: { color: this.guiConfiguration.sphere3Color },\r\n                },\r\n                {\r\n                    position: [40, 8, 0],\r\n                    castShadow: true,\r\n                },\r\n            );\r\n        },\r\n        // 创建渲染器\r\n        createRenderer() {\r\n            this.renderer = new THREE.WebGLRenderer();\r\n            //设置场景的背景颜色\r\n            this.renderer.setClearColor(new THREE.Color(0x000000));\r\n            //设置场景大小\r\n            this.renderer.setSize(window.innerWidth, window.innerHeight - 60);\r\n            //设置相机位置(x,y,z)\r\n            this.camera.position.set(-100, 40, 100);\r\n            // 通过lookAt将摄像机指向场景中心,(默认指向0,0,0)\r\n            this.camera.lookAt(this.scene.position);\r\n            //开启阴影\r\n            this.renderer.shadowMap.enabled = true;\r\n            // 将渲染结果添加到dom元素中\r\n            document.getElementById(\"webgl-output\").appendChild(this.renderer.domElement);\r\n            //使用指定的摄像机来渲染场景\r\n            this.renderer.render(this.scene, this.camera);\r\n        },\r\n        //创建光源\r\n        createLight() {\r\n            /* 需要注意的是：MeshBasicMaterial材质不会对光源有任何反应，基本材质只会使用指定的颜色来渲染物体 */\r\n            //定义光源\r\n            this.spotLight = new THREE.SpotLight(0xffffff);\r\n            //设置光源位置\r\n            this.spotLight.position.set(70, 130, 70);\r\n            // 启用阴影功能\r\n            this.spotLight.castShadow = true;\r\n            //将光源添加进场景\r\n            this.scene.add(this.spotLight);\r\n        },\r\n        // 创建坐标系\r\n        createAxes() {\r\n            //创建坐标系,设置轴线粗细值为20\r\n            this.axes = new THREE.AxesHelper(20);\r\n            //将轴线添加到场景中\r\n            this.scene.add(this.axes);\r\n        },\r\n        //创建平面\r\n        createPlane() {\r\n            //定义平面的大小\r\n            let planeGeometry = new THREE.PlaneGeometry(200, 200);\r\n            // 通过创建材质对象来设置平面的外观,这里使用的是基本材质\r\n            let planeMaterial = new THREE.MeshLambertMaterial({\r\n                color: 0xaaaaaa,\r\n            });\r\n            //将大小和外观组合进Mesh对象,赋值给平面对象\r\n            this.plane = new THREE.Mesh(planeGeometry, planeMaterial);\r\n            //平面绕x轴旋转九十度\r\n            this.plane.rotation.x = -0.5 * Math.PI;\r\n            // 定义其在场景中的位置\r\n            this.plane.position.set(0, 0, 0);\r\n            //接收光源\r\n            this.plane.receiveShadow = true;\r\n            //添加平面到场景中\r\n            this.scene.add(this.plane);\r\n        },\r\n\r\n        //执行动画\r\n        animate() {\r\n            // stats.update();\r\n            this.cube.rotation.x += this.guiConfiguration.cubeSpeed;\r\n            this.cube.rotation.y += this.guiConfiguration.cubeSpeed;\r\n            this.cube.rotation.z += this.guiConfiguration.cubeSpeed;\r\n            // this.sphere.position.x += this.guiConfiguration.speed;\r\n            // if (this.sphere.position.x > 20) {\r\n            //     this.sphere.position.x = -20;\r\n            // }\r\n            this.guiConfiguration.sphereInitVelocity += this.guiConfiguration.sphereAcceleration;\r\n            this.sphere.position.x = 20 * Math.cos(this.guiConfiguration.sphereInitVelocity);\r\n            this.sphere.position.z = 20 * Math.sin(this.guiConfiguration.sphereInitVelocity);\r\n\r\n            this.sphere2.position.x = 10 * Math.cos(this.guiConfiguration.sphereInitVelocity + 0.9);\r\n            this.sphere2.position.z = 10 * Math.sin(this.guiConfiguration.sphereInitVelocity + 0.9);\r\n\r\n            this.sphere3.position.x = 40 * Math.cos(this.guiConfiguration.sphereInitVelocity - 0.9);\r\n            this.sphere3.position.z = 40 * Math.sin(this.guiConfiguration.sphereInitVelocity - 0.9);\r\n            this.renderer.render(this.scene, this.camera);\r\n            requestAnimationFrame(this.animate);\r\n        },\r\n        //配置dat.gui\r\n        configGUI() {\r\n            // let options = {\r\n            //     message: \"哈喽啊~我是荣顶\",\r\n            //     speed: 0.8,\r\n            //     checkBox: false,\r\n            //     button: function () {\r\n            //         alert(123);\r\n            //     },\r\n            // };\r\n\r\n            this.gui = new dat.GUI();\r\n\r\n            this.gui.add(this.guiConfiguration, \"message\");\r\n            this.gui.add(this.guiConfiguration, \"cubeSpeed\", 0, 0.5);\r\n            this.gui.add(this.guiConfiguration, \"sphereInitVelocity\", -1, 1);\r\n            this.gui.add(this.guiConfiguration, \"sphereAcceleration\", 0, 1);\r\n            this.gui.add(this.guiConfiguration, \"checkBox\");\r\n            this.gui.add(this.guiConfiguration, \"button\").name(\"点我\");\r\n\r\n            // var testObj = {\r\n            //     color0: \"#ffae23\", // CSS string\r\n            //     color1: [0, 128, 255], // RGB array\r\n            //     color2: [0, 128, 255, 0.3], // RGB with alpha\r\n            //     color3: { h: 350, s: 0.9, v: 0.3 }, // Hue, saturation, value\r\n            // };\r\n            var f1 = this.gui.addFolder(\"球的颜色\");\r\n            let controller = f1.addColor(this.guiConfiguration, \"sphere3Color\").name(\"CSS颜色值\");\r\n            //第二个分组默认打开\r\n            f1.open();\r\n            // f1.addColor(testObj, \"color0\").name(\"CSS颜色值\");\r\n            // f1.addColor(testObj, \"color1\").name(\"RGB颜色值\");\r\n            // f1.addColor(testObj, \"color2\").name(\"RGBA颜色值\");\r\n            // f1.addColor(testObj, \"color3\").name(\"HUB颜色值\");\r\n            this.gui.domElement.style = \"position:absolute;top:300px;right:0px\";\r\n            //对应控制项值修改完毕响应\r\n            controller.onFinishChange((val) => {\r\n                console.log(\"🚀🚀🚀 / val\", val);\r\n                // this.sphere3.color.set(val);\r\n                this.scene.remove(this.sphere3);\r\n                this.createSphere3();\r\n            });\r\n        },\r\n        //获取pfs状态\r\n        getStats() {\r\n            var stats = new Stats();\r\n            stats.showPanel(0); // 0: fps, 1: ms, 2: mb, 3+: custom\r\n            document.querySelector(\".page-container\").appendChild(stats.dom);\r\n            stats.domElement.style = \"position:absolute;bottom:0px;left:0px\";\r\n            function animate() {\r\n                stats.begin();\r\n                // monitored code goes here\r\n                stats.end();\r\n                requestAnimationFrame(animate);\r\n            }\r\n            requestAnimationFrame(animate);\r\n        },\r\n    },\r\n};\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n.page-container {\r\n    // position: relative;\r\n}\r\n</style>\r\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./dat.gui.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./dat.gui.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./dat.gui.vue?vue&type=template&id=183fea19&scoped=true&\"\nimport script from \"./dat.gui.vue?vue&type=script&lang=js&\"\nexport * from \"./dat.gui.vue?vue&type=script&lang=js&\"\nimport style0 from \"./dat.gui.vue?vue&type=style&index=0&id=183fea19&scoped=true&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"183fea19\",\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}