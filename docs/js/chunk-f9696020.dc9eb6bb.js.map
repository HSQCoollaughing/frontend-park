{"version":3,"sources":["webpack:///./node_modules/core-js/internals/engine-ff-version.js","webpack:///./src/views/image-processing/pixel-image.vue?fb5c","webpack:///./src/utils/averageColor.js","webpack:///./src/utils/mostBlockColor.js","webpack:///src/views/image-processing/pixel-image.vue","webpack:///./src/views/image-processing/pixel-image.vue?db8d","webpack:///./src/views/image-processing/pixel-image.vue","webpack:///./node_modules/core-js/modules/es.array.sort.js","webpack:///./node_modules/core-js/internals/engine-webkit-version.js","webpack:///./src/views/image-processing/pixel-image.vue?e2b9","webpack:///./node_modules/core-js/internals/array-sort.js","webpack:///./node_modules/core-js/internals/engine-is-ie-or-edge.js"],"names":["userAgent","firefox","match","module","exports","render","_vm","this","_h","$createElement","_c","_self","staticClass","directives","name","rawName","value","expression","style","background","_m","ref","attrs","staticStyle","formParams","scopedSlots","_u","key","fn","on","inputFile","_v","_s","imgList","length","reload","generateImg","exportCanvas","staticRenderFns","getAverageColor","imgUrl","Promise","resolve","reject","canvas","document","createElement","width","height","img","Image","src","onload","console","log","ctx","getContext","scaleH","drawImage","data","getImageData","r","g","b","a","row","col","Math","round","color","url","e","mostBlockColor","blockList","blockMainColors","i","colorList","rgbaStr","k","arr","prop","push","split","count","sort","position","component","$","aFunction","toObject","toLength","fails","internalSort","arrayMethodIsStrict","FF","IE_OR_EDGE","V8","WEBKIT","test","nativeSort","FAILS_ON_UNDEFINED","undefined","FAILS_ON_NULL","STRICT_METHOD","STABLE_SORT","code","chr","index","result","String","fromCharCode","v","charAt","FORCED","getSortCompare","comparefn","x","y","target","proto","forced","array","call","itemsLength","items","arrayLength","webkit","floor","mergeSort","middle","insertionSort","merge","slice","element","j","left","right","llength","rlength","lindex","rindex","UA"],"mappings":"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","file":"js/chunk-f9696020.dc9eb6bb.js","sourcesContent":["var userAgent = require('../internals/engine-user-agent');\n\nvar firefox = userAgent.match(/firefox\\/(\\d+)/i);\n\nmodule.exports = !!firefox && +firefox[1];\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"home\"},[_c('div',{directives:[{name:\"loading\",rawName:\"v-loading\",value:(_vm.loading),expression:\"loading\"}],staticClass:\"content\",style:((\"background:\" + _vm.background))},[_vm._m(0),_c('canvas',{ref:\"canvas\",attrs:{\"id\":\"canvas\",\"width\":\"800\",\"height\":\"800\"}})]),_c('div',{staticClass:\"operations\"},[_c('div',{staticStyle:{\"height\":\"800px\"}},[_c('EasyForm',{attrs:{\"formParams\":_vm.formParams},scopedSlots:_vm._u([{key:\"inputFile\",fn:function(ref){return [_c('el-button',{attrs:{\"type\":\"primary\",\"size\":\"small\"},on:{\"click\":_vm.inputFile}},[_vm._v(\" 选择文件 \")]),_c('div',[_vm._v(\"共选择\"+_vm._s(_vm.imgList.length)+\"个文件\")])]}}])}),_c('el-button',{attrs:{\"type\":\"primary\",\"size\":\"default\"},on:{\"click\":_vm.reload}},[_vm._v(\"重置\")]),_c('el-button',{attrs:{\"type\":\"primary\",\"size\":\"default\"},on:{\"click\":_vm.generateImg}},[_vm._v(\"生成图片\")]),_c('el-button',{attrs:{\"type\":\"success\",\"size\":\"default\"},on:{\"click\":_vm.exportCanvas}},[_vm._v(\"导出图片\")])],1)])])}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticStyle:{\"text-align\":\"left\",\"width\":\"800px\"}},[_c('p',[_vm._v(\"使用方法:\")]),_c('p',{staticStyle:{\"font-size\":\"12px\"}},[_vm._v(\" 选取目标文件后,再选取需要用来合成目标文件的素材图片,通过自定义的一些配置,生成像素图,点击导出图片即可 \")])])}]\n\nexport { render, staticRenderFns }","export function getAverageColor(imgUrl) {\r\n    return new Promise((resolve, reject) => {\r\n        try {\r\n            const canvas = document.createElement(\"canvas\");\r\n            //设置canvas的宽高都为20,越小越快,但是越小越不精确\r\n            canvas.width = 20;\r\n            canvas.height = 20;\r\n            const img = new Image(); // 创建img元素\r\n            img.src = imgUrl; // 设置图片源地址\r\n            img.onload = () => {\r\n                console.log(img.width, img.height);\r\n                let ctx = canvas.getContext(\"2d\");\r\n                const scaleH = canvas.height / img.height;\r\n                img.height = canvas.height;\r\n                img.width = img.width * scaleH;\r\n                ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\r\n                // 获取像素数据\r\n                let data = ctx.getImageData(0, 0, canvas.width, canvas.height).data;\r\n                let r = 0,\r\n                    g = 0,\r\n                    b = 0,\r\n                    a = 0;\r\n                // 取所有像素的平均值\r\n                for (let row = 0; row < canvas.height; row++) {\r\n                    for (let col = 0; col < canvas.width; col++) {\r\n                        r += data[(canvas.width * row + col) * 4];\r\n                        g += data[(canvas.width * row + col) * 4 + 1];\r\n                        b += data[(canvas.width * row + col) * 4 + 2];\r\n                        a += data[(canvas.width * row + col) * 4 + 3];\r\n                    }\r\n                }\r\n                // 求取平均值\r\n                r /= canvas.width * canvas.height;\r\n                g /= canvas.width * canvas.height;\r\n                b /= canvas.width * canvas.height;\r\n                a /= canvas.width * canvas.height;\r\n\r\n                // 将最终的值取整\r\n                r = Math.round(r);\r\n                g = Math.round(g);\r\n                b = Math.round(b);\r\n                a = Math.round(a);\r\n                console.log(\r\n                    `%c ${\"rgba(\" + r + \",\" + g + \",\" + b + \",\" + a + \")\"}\r\n                                                                        `,\r\n                    `background: ${\"rgba(\" + r + \",\" + g + \",\" + b + \",\" + a + \")\"};`\r\n                );\r\n                resolve({ color: [r, g, b, a], url: imgUrl });\r\n            };\r\n        } catch (e) {\r\n            reject(e);\r\n        }\r\n    });\r\n}\r\n","export function mostBlockColor(blockList) {\r\n    let blockMainColors = [];\r\n    for (let i = 0; i < blockList.length; i++) {\r\n        let colorList = [];\r\n        let rgbaStr = \"\";\r\n        for (let k = 0; k < blockList[k].color.length; k++) {\r\n            rgbaStr = blockList[i].color[k];\r\n            if (rgbaStr in colorList) {\r\n                ++colorList[rgbaStr];\r\n            } else {\r\n                colorList[rgbaStr] = 1;\r\n            }\r\n        }\r\n        let arr = [];\r\n        for (let prop in colorList) {\r\n            arr.push({\r\n                // 如果只获取rgb,则为`rgb(${prop})`\r\n                color: prop.split(\",\"),\r\n                // color: `rgba(${prop})`,\r\n                count: colorList[prop],\r\n            });\r\n        }\r\n        // 数组排序\r\n        arr.sort((a, b) => {\r\n            return b.count - a.count;\r\n        });\r\n        arr[0].position = blockList[i].position;\r\n        blockMainColors.push(arr[0]);\r\n    }\r\n    return blockMainColors;\r\n}","<template>\r\n    <!--  -->\r\n    <div class=\"home\">\r\n        <div class=\"content\" :style=\"`background:${background}`\" v-loading=\"loading\">\r\n            <div style=\"text-align: left; width: 800px\">\r\n                <p>使用方法:</p>\r\n                <p style=\"font-size: 12px\">\r\n                    选取目标文件后,再选取需要用来合成目标文件的素材图片,通过自定义的一些配置,生成像素图,点击导出图片即可\r\n                </p>\r\n            </div>\r\n            <canvas id=\"canvas\" ref=\"canvas\" width=\"800\" height=\"800\"></canvas>\r\n        </div>\r\n        <div class=\"operations\">\r\n            <div style=\"height: 800px\">\r\n                <EasyForm :formParams=\"formParams\">\r\n                    <template #inputFile=\"{}\">\r\n                        <el-button type=\"primary\" size=\"small\" @click=\"inputFile\">\r\n                            选择文件\r\n                        </el-button>\r\n                        <div>共选择{{ imgList.length }}个文件</div>\r\n                    </template>\r\n                </EasyForm>\r\n                <el-button type=\"primary\" size=\"default\" @click=\"reload\">重置</el-button>\r\n                <el-button type=\"primary\" size=\"default\" @click=\"generateImg\">生成图片</el-button>\r\n                <el-button type=\"success\" size=\"default\" @click=\"exportCanvas\">导出图片</el-button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n/* eslint-disable */\r\n// @ is an alias to /src\r\nimport { getAverageColor } from \"@utils/averageColor.js\";\r\nimport { inputFile } from \"@utils/inputFile.js\";\r\nimport { mostBlockColor } from \"@utils/mostBlockColor.js\";\r\nimport { fabric } from \"fabric\";\r\nexport default {\r\n    components: {},\r\n    data() {\r\n        return {\r\n            imgList: [], //素材图\r\n            blockList: [], //画布数据\r\n            blockMainColors: [], //每个格子的主色调\r\n            loading: false,\r\n            formParams: {\r\n                data: {}, // 表单数据对象\r\n                formList: {\r\n                    targetFile: {\r\n                        type: \"upload\",\r\n                        label: \"目标图片\",\r\n                        limit: 1,\r\n                        action: \"#\",\r\n                        listType: \"file-list\",\r\n                        fileList: [],\r\n                        autoUpload: false,\r\n                        onChange: this.slectFile,\r\n                    },\r\n                    inputFile: {\r\n                        type: \"customItem\",\r\n                        label: \"素材图片\",\r\n                        name: \"inputFile\",\r\n                    },\r\n                    /* userN2ww2ame: {\r\n                        type: \"slider\",\r\n                        label: \"贴片大小\",\r\n                    }, */\r\n                    //TODO\r\n                    aaa: {\r\n                        type: \"select\",\r\n                        label: \"分布方式\",\r\n                        placeholder: \"请选择\",\r\n                        selectOptions: [],\r\n                        disabled: true,\r\n                    },\r\n                    bbb: {\r\n                        type: \"select\",\r\n                        label: \"高清程度\",\r\n                        placeholder: \"请选择\",\r\n                        selectOptions: [],\r\n                        disabled: true,\r\n                    },\r\n                    ccc: {\r\n                        type: \"switch\",\r\n                        label: \"连续重复:\",\r\n                        placeholder: \"请选择\",\r\n                        disabled: true,\r\n                    },\r\n                    ddd: {\r\n                        type: \"switch\",\r\n                        label: \"按比例调整\",\r\n                        disabled: true,\r\n                    },\r\n                    eee: {\r\n                        type: \"select\",\r\n                        label: \"方向／比例\",\r\n                        selectOptions: [],\r\n                        disabled: true,\r\n                    },\r\n                    fff: {\r\n                        type: \"slider\",\r\n                        label: \"贴片高度\",\r\n                        disabled: true,\r\n                    },\r\n                    ggg: {\r\n                        type: \"slider\",\r\n                        label: \"贴片宽度\",\r\n                        disabled: true,\r\n                    },\r\n                },\r\n\r\n                labelWidth: \"90px\",\r\n                rules: {},\r\n            },\r\n            background: \"#91A8D0\",\r\n            ctx: null,\r\n            canvas: null,\r\n        };\r\n    },\r\n    mounted() {\r\n        this.initCanvas();\r\n    },\r\n    methods: {\r\n        //初始化画布\r\n        initCanvas() {\r\n            this.canvas = new fabric.Canvas(\"canvas\", {\r\n                isDrawingMode: false, //自由绘画模式\r\n                selectable: false,\r\n                selection: false,\r\n                hoverCursor: \"pointer\",\r\n                devicePixelRatio: true, //Retina 高清屏 屏幕支持\r\n                stroke: \"lightgreen\",\r\n                strokeWidth: 4,\r\n            });\r\n            this.ctx = canvas.getContext(\"2d\");\r\n            this.canvas.freeDrawingBrush.color = \"blue\";\r\n            this.canvas.freeDrawingBrush.width = 5;\r\n            this.addCanvasEvent(); //给画布添加事件\r\n        },\r\n        //重置\r\n        reload() {\r\n            // window.location.reload();\r\n            console.log(this.canvas.viewportTransform);\r\n            this.canvas.deactivateAll().renderAll();\r\n            //http://fabricjs.com/fabric-intro-part-5#pan_zoom\r\n            // this.canvas.clear(); // 清空画布\r\n        },\r\n        //生成图片\r\n        generateImg() {\r\n            this.loading = true;\r\n            let diffColorList = [];\r\n            //遍历所有方块\r\n            for (let i = 0; i < this.blockMainColors.length; i++) {\r\n                diffColorList[i] = { diffs: [] };\r\n                //遍历所有图片\r\n                for (let j = 0; j < this.imgList.length; j++) {\r\n                    diffColorList[i].diffs.push({\r\n                        url: this.imgList[j].url,\r\n                        diff: this.colorDiff(this.blockMainColors[i].color, this.imgList[j].color),\r\n                        color: this.imgList[j].color,\r\n                    });\r\n                }\r\n                //对比较过的图片进行排序,差异最小的放最前面\r\n                diffColorList[i].diffs.sort((a, b) => {\r\n                    return a.diff - b.diff;\r\n                });\r\n                //取第0个图片信息\r\n                diffColorList[i].url = diffColorList[i].diffs[0].url;\r\n                diffColorList[i].position = this.blockMainColors[i].position;\r\n                diffColorList[i].Acolor = this.blockMainColors[i].color;\r\n                diffColorList[i].Bcolor = diffColorList[i].diffs[0].color;\r\n            }\r\n            this.loading = false;\r\n            console.log(diffColorList);\r\n            //便利每一个方块,对其渲染\r\n            diffColorList.forEach((item) => {\r\n                fabric.Image.fromURL(item.url, (img) => {\r\n                    let scale = img.height > img.width ? 8 / img.width : 8 / img.height;\r\n                    // img.scale(8 / img.height);\r\n                    img.set({\r\n                        left: item.position[0] * 8,\r\n                        top: item.position[1] * 8,\r\n                        originX: \"center\",\r\n                        scaleX: scale,\r\n                        scaleY: scale,\r\n                    });\r\n                    this.canvas.add(img);\r\n                });\r\n            });\r\n        },\r\n        //目标图片选择回调\r\n        slectFile(file, fileList) {\r\n            let tempUrl = window.URL.createObjectURL(file.raw);\r\n            this.drawImage(tempUrl);\r\n        },\r\n        //素材图片选择回调\r\n        async inputFile() {\r\n            let files = await inputFile();\r\n            this.loading = true;\r\n            for (let i = 0; i < files.length; i++) {\r\n                let image = await getAverageColor(files[i]);\r\n                this.imgList.push(image);\r\n            }\r\n            console.log(this.imgList);\r\n            this.loading = false;\r\n        },\r\n        //栅格线\r\n        drawLine() {\r\n            const blockPixel = 8;\r\n            for (let i = 0; i <= this.canvas.width / blockPixel; i++) {\r\n                this.canvas.add(\r\n                    new fabric.Line([i * blockPixel, 0, i * blockPixel, this.canvas.height], {\r\n                        left: i * blockPixel,\r\n                        stroke: \"gray\",\r\n                        selectable: false, //是否可被选中\r\n                    })\r\n                );\r\n                this.canvas.add(\r\n                    new fabric.Line([0, i * blockPixel, this.canvas.height, i * blockPixel], {\r\n                        top: i * blockPixel,\r\n                        stroke: \"gray\",\r\n                        selectable: false, //是否可被选中\r\n                    })\r\n                );\r\n            }\r\n        },\r\n        //获取画布像素数据\r\n        getCanvasData() {\r\n            // let blockList = [];\r\n            for (let Y = 0; Y < this.canvas.height / 8; Y++) {\r\n                for (let X = 0; X < this.canvas.width / 8; X++) {\r\n                    //每8*8像素的一块区域一组\r\n                    let tempColorData = this.ctx.getImageData(X * 8, Y * 8, 8, 8).data;\r\n                    // console.log(X, Y, tempColorData);\r\n                    //将获取到数据每4个一组,每组都是一个像素\r\n                    this.blockList[Y * 100 + X] = { position: [X, Y], color: [] };\r\n                    for (let i = 0; i < tempColorData.length; i += 4) {\r\n                        this.blockList[Y * 100 + X].color.push([\r\n                            tempColorData[i],\r\n                            tempColorData[i + 1],\r\n                            tempColorData[i + 2],\r\n                            tempColorData[i + 3],\r\n                        ]);\r\n                    }\r\n                }\r\n            }\r\n            console.log(mostBlockColor(this.blockList));\r\n            this.mostBlockColor(this.blockList);\r\n            this.loading = false;\r\n        },\r\n        //绘制目标图片\r\n        drawImage(url) {\r\n            this.loading = true;\r\n            fabric.Image.fromURL(url, (img) => {\r\n                //设置缩放比例,长图的缩放比为this.canvas.width / img.width,宽图的缩放比为this.canvas.height / img.height\r\n                let scale =\r\n                    img.height > img.width\r\n                        ? this.canvas.width / img.width\r\n                        : this.canvas.height / img.height;\r\n                img.set({\r\n                    left: this.canvas.width / 2, //距离左边的距离\r\n                    originX: \"center\", //图片在原点的对齐方式\r\n                    originY: \"center\",\r\n                    top: this.canvas.height / 2,\r\n                    scaleX: scale, //横向缩放\r\n                    scaleY: scale, //纵向缩放\r\n                    selectable: false, //可交互\r\n                });\r\n                img.on(\"added\", (e) => {\r\n                    //这里有个问题,added后获取的是之前的画布像素数据,其他手动触发的事件,不会有这种问题\r\n                    //故用一个异步解决\r\n                    setTimeout(() => {\r\n                        this.getCanvasData();\r\n                    }, 500);\r\n                });\r\n                this.canvas.add(img); //将图片添加到画布\r\n                // this.drawLine(); //绘制网格线条\r\n            });\r\n        },\r\n        //获取每个格子的主色调\r\n        mostBlockColor(blockList) {\r\n            //所有颜色的平均值为主色调\r\n            for (let i = 0; i < blockList.length; i++) {\r\n                let r = 0,\r\n                    g = 0,\r\n                    b = 0,\r\n                    a = 0;\r\n                for (let j = 0; j < blockList[i].color[j].length; j++) {\r\n                    r += blockList[i].color[j][0];\r\n                    g += blockList[i].color[j][1];\r\n                    b += blockList[i].color[j][2];\r\n                    a += blockList[i].color[j][3];\r\n                }\r\n\r\n                // 求取平均值\r\n                r /= blockList[i].color[0].length;\r\n                g /= blockList[i].color[0].length;\r\n                b /= blockList[i].color[0].length;\r\n                a /= blockList[i].color[0].length;\r\n                // 将最终的值取整\r\n                r = Math.round(r);\r\n                g = Math.round(g);\r\n                b = Math.round(b);\r\n                a = Math.round(a);\r\n                this.blockMainColors.push({\r\n                    position: blockList[i].position,\r\n                    color: [r, g, b, a],\r\n                });\r\n            }\r\n            console.log(this.blockMainColors);\r\n            //最多颜色为主色调\r\n            /* for (let i = 0; i < blockList.length; i++) {\r\n                let colorList = [];\r\n                let rgbaStr = \"\";\r\n                for (let k = 0; k < blockList[k].color.length; k++) {\r\n                    rgbaStr = blockList[i].color[k];\r\n                    if (rgbaStr in colorList) {\r\n                        ++colorList[rgbaStr];\r\n                    } else {\r\n                        colorList[rgbaStr] = 1;\r\n                    }\r\n                }\r\n                let arr = [];\r\n                for (let prop in colorList) {\r\n                    arr.push({\r\n                        // 如果只获取rgb,则为`rgb(${prop})`\r\n                        color: prop.split(\",\"),\r\n                        // color: `rgba(${prop})`,\r\n                        count: colorList[prop],\r\n                    });\r\n                }\r\n                // 数组排序\r\n                arr.sort((a, b) => {\r\n                    return b.count - a.count;\r\n                });\r\n                arr[0].position = blockList[i].position;\r\n                this.blockMainColors.push(arr[0]);\r\n            } */\r\n            // console.log(this.blockMainColors);\r\n        },\r\n        //计算颜色差异\r\n        colorDiff(color1, color2) {\r\n            let d = 0;\r\n            for (let i = 0; i < color1.length; i++) {\r\n                d += (color1[i] - color2[i]) ** 2;\r\n            }\r\n            return Math.sqrt(d);\r\n        },\r\n        //添加画布事件\r\n        addCanvasEvent() {\r\n            //画布重绘\r\n            this.canvas.on(\"after:render\", (e) => {});\r\n            //有对象添加进来\r\n            this.canvas.on(\"object:added\", (e) => {});\r\n            //鼠标单击\r\n            this.canvas.on(\"mouse:down\", (e) => {\r\n                //ALT键盘+单击,获取当前光标处像素的值\r\n                if (e.e.ctrlKey) {\r\n                    let mouse = this.canvas.getPointer(e.e);\r\n                    let x = parseInt(mouse.x);\r\n                    let y = parseInt(mouse.y);\r\n                    let px = this.ctx.getImageData(x, y, 1, 1).data;\r\n                    console.log(\r\n                        `%c x,y:(${x},${y})/rgba(${px[0]},${px[1]},${px[2]},${px[3]})`,\r\n                        `background: rgba(${px[0]},${px[1]},${px[2]},${px[3]});`\r\n                    );\r\n                }\r\n            });\r\n            // 滚轮事件\r\n            this.canvas.on(\"mouse:wheel\", (e) => {\r\n                e.e.preventDefault();\r\n                e.e.stopPropagation();\r\n                let ZOOM = 0.05;\r\n                let point = new fabric.Point(this.canvas.width / 2 - 1, this.canvas.height / 2 - 1);\r\n                //(alt + whell 缩放)\r\n                if (!e.e.ctrlKey) {\r\n                    return;\r\n                } else if (e.e.altKey && e.e.ctrlKey) {\r\n                    //(ctrl + alt + whell 加速缩放)\r\n                    // ZOOM = 0.1;\r\n                    point = new fabric.Point(e.pointer.x, e.pointer.y);\r\n                }\r\n                this.zoom = (e.e.deltaY > 0 ? -ZOOM : ZOOM) + this.canvas.getZoom();\r\n                this.zoom = Math.max(0.1, this.zoom); //最小为原来的0.1倍\r\n                this.zoom = Math.min(10, this.zoom); //最大是原来的10倍\r\n                this.canvas.zoomToPoint(point, this.zoom);\r\n            });\r\n            //画布随着鼠标移动。\r\n            this.canvas.on({\r\n                \"mouse:down\": (e) => {\r\n                    if (e.e.altKey) {\r\n                        this.panning = true;\r\n                        this.canvas.selection = false;\r\n                    }\r\n                },\r\n                \"mouse:up\": (e) => {\r\n                    this.panning = false;\r\n                    this.canvas.selection = true;\r\n                },\r\n                \"mouse:move\": (e) => {\r\n                    if (this.panning && e && e.e) {\r\n                        let delta = new fabric.Point(e.e.movementX, e.e.movementY);\r\n                        this.canvas.relativePan(delta);\r\n                    }\r\n                },\r\n            });\r\n            this.canvas.on({\r\n                //对象被移动时,添加透明效果\r\n                \"object:moving\": function (e) {\r\n                    console.log(e);\r\n                    e.target.opacity = 0.5;\r\n                },\r\n                //对象被改变后\r\n                \"object:modified\": function (e) {\r\n                    e.target.opacity = 1;\r\n                },\r\n            });\r\n        },\r\n        //导出图片\r\n        exportCanvas() {\r\n            const dataURL = this.canvas.toDataURL({\r\n                width: this.canvas.width,\r\n                height: this.canvas.height,\r\n                left: 0,\r\n                top: 0,\r\n                format: \"png\",\r\n            });\r\n            const link = document.createElement(\"a\");\r\n            link.download = \"canvas.png\";\r\n            link.href = dataURL;\r\n            document.body.appendChild(link);\r\n            link.click();\r\n            document.body.removeChild(link);\r\n        },\r\n    },\r\n};\r\n</script>\r\n<style lang=\"scss\" scoped>\r\n::v-deep .el-form-item__label {\r\n    color: white !important;\r\n}\r\n::v-deep .el-upload-list {\r\n    max-width: 200px;\r\n    overflow: hidden;\r\n    .el-upload-list__item-name {\r\n        color: white;\r\n    }\r\n}\r\n.home {\r\n    transition: width 0.28s;\r\n    width: 100vw;\r\n    min-width: 1200px;\r\n    height: 100%;\r\n    display: flex;\r\n    .operations {\r\n        background: #516fa3;\r\n        padding: 20px;\r\n        width: 300px;\r\n        color: white;\r\n        border: 1px solid #516fa3;\r\n        display: flex;\r\n        align-items: center;\r\n    }\r\n    .content {\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: center;\r\n        align-items: center;\r\n        min-width: 820px;\r\n        overflow: hidden;\r\n        flex: 1;\r\n    }\r\n}\r\n#canvas {\r\n    border: 2px dashed #516fa3;\r\n    object-fit: fill;\r\n    background-color: white;\r\n}\r\n</style>\r\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./pixel-image.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./pixel-image.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./pixel-image.vue?vue&type=template&id=03e0cd2c&scoped=true&\"\nimport script from \"./pixel-image.vue?vue&type=script&lang=js&\"\nexport * from \"./pixel-image.vue?vue&type=script&lang=js&\"\nimport style0 from \"./pixel-image.vue?vue&type=style&index=0&id=03e0cd2c&lang=scss&scoped=true&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"03e0cd2c\",\n  null\n  \n)\n\nexport default component.exports","'use strict';\nvar $ = require('../internals/export');\nvar aFunction = require('../internals/a-function');\nvar toObject = require('../internals/to-object');\nvar toLength = require('../internals/to-length');\nvar fails = require('../internals/fails');\nvar internalSort = require('../internals/array-sort');\nvar arrayMethodIsStrict = require('../internals/array-method-is-strict');\nvar FF = require('../internals/engine-ff-version');\nvar IE_OR_EDGE = require('../internals/engine-is-ie-or-edge');\nvar V8 = require('../internals/engine-v8-version');\nvar WEBKIT = require('../internals/engine-webkit-version');\n\nvar test = [];\nvar nativeSort = test.sort;\n\n// IE8-\nvar FAILS_ON_UNDEFINED = fails(function () {\n  test.sort(undefined);\n});\n// V8 bug\nvar FAILS_ON_NULL = fails(function () {\n  test.sort(null);\n});\n// Old WebKit\nvar STRICT_METHOD = arrayMethodIsStrict('sort');\n\nvar STABLE_SORT = !fails(function () {\n  // feature detection can be too slow, so check engines versions\n  if (V8) return V8 < 70;\n  if (FF && FF > 3) return;\n  if (IE_OR_EDGE) return true;\n  if (WEBKIT) return WEBKIT < 603;\n\n  var result = '';\n  var code, chr, value, index;\n\n  // generate an array with more 512 elements (Chakra and old V8 fails only in this case)\n  for (code = 65; code < 76; code++) {\n    chr = String.fromCharCode(code);\n\n    switch (code) {\n      case 66: case 69: case 70: case 72: value = 3; break;\n      case 68: case 71: value = 4; break;\n      default: value = 2;\n    }\n\n    for (index = 0; index < 47; index++) {\n      test.push({ k: chr + index, v: value });\n    }\n  }\n\n  test.sort(function (a, b) { return b.v - a.v; });\n\n  for (index = 0; index < test.length; index++) {\n    chr = test[index].k.charAt(0);\n    if (result.charAt(result.length - 1) !== chr) result += chr;\n  }\n\n  return result !== 'DGBEFHACIJK';\n});\n\nvar FORCED = FAILS_ON_UNDEFINED || !FAILS_ON_NULL || !STRICT_METHOD || !STABLE_SORT;\n\nvar getSortCompare = function (comparefn) {\n  return function (x, y) {\n    if (y === undefined) return -1;\n    if (x === undefined) return 1;\n    if (comparefn !== undefined) return +comparefn(x, y) || 0;\n    return String(x) > String(y) ? 1 : -1;\n  };\n};\n\n// `Array.prototype.sort` method\n// https://tc39.es/ecma262/#sec-array.prototype.sort\n$({ target: 'Array', proto: true, forced: FORCED }, {\n  sort: function sort(comparefn) {\n    if (comparefn !== undefined) aFunction(comparefn);\n\n    var array = toObject(this);\n\n    if (STABLE_SORT) return comparefn === undefined ? nativeSort.call(array) : nativeSort.call(array, comparefn);\n\n    var items = [];\n    var arrayLength = toLength(array.length);\n    var itemsLength, index;\n\n    for (index = 0; index < arrayLength; index++) {\n      if (index in array) items.push(array[index]);\n    }\n\n    items = internalSort(items, getSortCompare(comparefn));\n    itemsLength = items.length;\n    index = 0;\n\n    while (index < itemsLength) array[index] = items[index++];\n    while (index < arrayLength) delete array[index++];\n\n    return array;\n  }\n});\n","var userAgent = require('../internals/engine-user-agent');\n\nvar webkit = userAgent.match(/AppleWebKit\\/(\\d+)\\./);\n\nmodule.exports = !!webkit && +webkit[1];\n","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./pixel-image.vue?vue&type=style&index=0&id=03e0cd2c&lang=scss&scoped=true&\"","// TODO: use something more complex like timsort?\nvar floor = Math.floor;\n\nvar mergeSort = function (array, comparefn) {\n  var length = array.length;\n  var middle = floor(length / 2);\n  return length < 8 ? insertionSort(array, comparefn) : merge(\n    mergeSort(array.slice(0, middle), comparefn),\n    mergeSort(array.slice(middle), comparefn),\n    comparefn\n  );\n};\n\nvar insertionSort = function (array, comparefn) {\n  var length = array.length;\n  var i = 1;\n  var element, j;\n\n  while (i < length) {\n    j = i;\n    element = array[i];\n    while (j && comparefn(array[j - 1], element) > 0) {\n      array[j] = array[--j];\n    }\n    if (j !== i++) array[j] = element;\n  } return array;\n};\n\nvar merge = function (left, right, comparefn) {\n  var llength = left.length;\n  var rlength = right.length;\n  var lindex = 0;\n  var rindex = 0;\n  var result = [];\n\n  while (lindex < llength || rindex < rlength) {\n    if (lindex < llength && rindex < rlength) {\n      result.push(comparefn(left[lindex], right[rindex]) <= 0 ? left[lindex++] : right[rindex++]);\n    } else {\n      result.push(lindex < llength ? left[lindex++] : right[rindex++]);\n    }\n  } return result;\n};\n\nmodule.exports = mergeSort;\n","var UA = require('../internals/engine-user-agent');\n\nmodule.exports = /MSIE|Trident/.test(UA);\n"],"sourceRoot":""}