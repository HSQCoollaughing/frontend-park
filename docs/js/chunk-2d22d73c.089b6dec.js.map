{"version":3,"sources":["webpack://frontend-park-[name]/./src/views/three/animate.vue?95a7","webpack://frontend-park-[name]/src/views/three/animate.vue","webpack://frontend-park-[name]/./src/views/three/animate.vue?f3a7","webpack://frontend-park-[name]/./src/views/three/animate.vue"],"names":["render","_vm","this","_h","$createElement","_self","_c","_m","staticRenderFns","staticClass","attrs","component"],"mappings":"mJAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAsBH,EAAII,MAAMC,GAAO,OAAOL,EAAIM,GAAG,IACnGC,EAAkB,CAAC,WAAa,IAAIP,EAAIC,KAASC,EAAGF,EAAIG,eAAmBE,EAAGL,EAAII,MAAMC,IAAIH,EAAG,OAAOG,EAAG,MAAM,CAACG,YAAY,kBAAkB,CAACH,EAAG,MAAM,CAACI,MAAM,CAAC,GAAK,sB,YCOzK,GACE,WAAF,GACE,MAAF,GACE,KAHF,WAII,MAAJ,CACM,MAAN,KACM,OAAN,KACM,SAAN,KACM,OAAN,KACM,KAAN,KACM,MAAN,OAGE,SAAF,GACE,MAAF,GACE,QAfF,aAgBE,QAhBF,WAiBI,KAAJ,OACI,KAAJ,WAEE,QAAF,CACI,KADJ,WAGM,KAAN,qBAEM,KAAN,kCACA,GACA,0CACA,GACA,KAIM,KAAN,aAEM,KAAN,cAEM,KAAN,aAEM,KAAN,eAEM,KAAN,eAEM,KAAN,aACM,KAAN,kBAEM,KAAN,cAEM,KAAN,kBAGI,eA/BJ,WAgCM,KAAN,gCAEM,KAAN,0CAEM,KAAN,0DAEM,KAAN,+BAEM,KAAN,mCAEM,KAAN,8BAEM,SAAN,qEAEM,KAAN,yCAGI,YAjDJ,WAoDM,KAAN,uCAEM,KAAN,iCAEM,KAAN,wBAEM,KAAN,2BAGI,WA7DJ,WA+DM,KAAN,6BAEM,KAAN,sBAGI,YApEJ,WAsEM,IAAN,kCAEA,gCACQ,MAAR,WAGM,KAAN,yBAEM,KAAN,6BAEM,KAAN,0BAEM,KAAN,uBAEM,KAAN,uBAGI,WAvFJ,WAyFM,IAAN,8BAEA,gCACQ,MAAR,WAEM,KAAN,wBAEM,KAAN,yBAEM,KAAN,mBAEM,KAAN,sBAGI,aAvGJ,WAyGM,IAAN,mCAEA,gCACQ,MAAR,UAEM,KAAN,0BACM,KAAN,8BACM,KAAN,qBACM,KAAN,wBAGI,aApHJ,WAqHM,IAAN,gCACA,gCAAQ,MAAR,SAAQ,WAAR,IACA,qBACM,EAAN,sBACM,EAAN,cACM,KAAN,cAGI,WA7HJ,WA8HM,IAAN,iCACA,8BAAQ,MAAR,SAAQ,WAAR,IACA,qBACM,EAAN,wBACM,EAAN,cACM,KAAN,cAGI,YAtIJ,WAuIM,IAAN,iCACA,8BAAQ,MAAR,SAAQ,WAAR,IACA,qBACM,EAAN,wBACM,EAAN,cACM,KAAN,cAGI,gBA/IJ,WAgJM,IAAN,mCACA,gCACA,2BACM,EAAN,sBACM,EAAN,qBACM,EAAN,wBACM,EAAN,wBACM,EAAN,cACM,KAAN,cAGI,QA3JJ,WA6JM,KAAN,qBACM,KAAN,qBACM,KAAN,sBACA,4BACQ,KAAR,uBAEM,KAAN,wCACM,sBAAN,iBChMgW,I,YCO5VC,EAAY,eACd,EACAX,EACAQ,GACA,EACA,KACA,WACA,MAIa,aAAAG,E","file":"js/chunk-2d22d73c.089b6dec.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"page-container\"},[_c('div',{attrs:{\"id\":\"webgl-output\"}})])}]\n\nexport { render, staticRenderFns }","<template>\r\n    <div class=\"page-container\">\r\n        <div id=\"webgl-output\"></div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport * as THREE from \"three\";\r\nexport default {\r\n    components: {},\r\n    props: {},\r\n    data() {\r\n        return {\r\n            scene: null,\r\n            camera: null,\r\n            renderer: null,\r\n            sphere: null,\r\n            cube: null,\r\n            plane: null,\r\n        };\r\n    },\r\n    computed: {},\r\n    watch: {},\r\n    created() {},\r\n    mounted() {\r\n        this.init();\r\n        this.animate();\r\n    },\r\n    methods: {\r\n        init() {\r\n            //定义场景\r\n            this.scene = new THREE.Scene();\r\n            //定义摄像机\r\n            this.camera = new THREE.PerspectiveCamera(\r\n                45,\r\n                window.innerWidth / (window.innerHeight - 60),\r\n                0.1,\r\n                1000,\r\n            );\r\n\r\n            //创建坐标系\r\n            this.createAxes();\r\n            //创建平面\r\n            this.createPlane();\r\n            //创建立方体\r\n            this.createCube();\r\n            //创建球体\r\n            this.createSphere();\r\n            //创建圆形几何体\r\n            this.createCircle();\r\n            //创建圆锥几何体\r\n            this.createCone();\r\n            this.createWireframe();\r\n            //创建光源\r\n            this.createLight();\r\n            //创建渲染器,放最后\r\n            this.createRenderer();\r\n        },\r\n        // 创建渲染器\r\n        createRenderer() {\r\n            this.renderer = new THREE.WebGLRenderer();\r\n            //设置场景的背景颜色\r\n            this.renderer.setClearColor(new THREE.Color(0x000000));\r\n            //设置场景大小\r\n            this.renderer.setSize(window.innerWidth, window.innerHeight - 60);\r\n            //设置相机位置(x,y,z)\r\n            this.camera.position.set(-50, 50, 50);\r\n            // 通过lookAt将摄像机指向场景中心,(默认指向0,0,0)\r\n            this.camera.lookAt(this.scene.position);\r\n            //开启阴影\r\n            this.renderer.shadowMap.enabled = true;\r\n            // 将渲染结果添加到dom元素中\r\n            document.getElementById(\"webgl-output\").appendChild(this.renderer.domElement);\r\n            //使用指定的摄像机来渲染场景\r\n            this.renderer.render(this.scene, this.camera);\r\n        },\r\n        //创建光源\r\n        createLight() {\r\n            /* 需要注意的是：MeshBasicMaterial材质不会对光源有任何反应，基本材质只会使用指定的颜色来渲染物体 */\r\n            //定义光源\r\n            this.spotLight = new THREE.SpotLight(0xffffff);\r\n            //设置光源位置\r\n            this.spotLight.position.set(10, 40, 40);\r\n            // 启用阴影功能\r\n            this.spotLight.castShadow = true;\r\n            //将光源添加进场景\r\n            this.scene.add(this.spotLight);\r\n        },\r\n        // 创建坐标系\r\n        createAxes() {\r\n            //创建坐标系,设置轴线粗细值为20\r\n            this.axes = new THREE.AxesHelper(20);\r\n            //将轴线添加到场景中\r\n            this.scene.add(this.axes);\r\n        },\r\n        //创建平面\r\n        createPlane() {\r\n            //定义平面的大小\r\n            let planeGeometry = new THREE.PlaneGeometry(100, 100);\r\n            // 通过创建材质对象来设置平面的外观,这里使用的是基本材质\r\n            let planeMaterial = new THREE.MeshLambertMaterial({\r\n                color: 0xaaaaaa,\r\n            });\r\n            //将大小和外观组合进Mesh对象,赋值给平面对象\r\n            this.plane = new THREE.Mesh(planeGeometry, planeMaterial);\r\n            //平面绕x轴旋转九十度\r\n            this.plane.rotation.x = -0.5 * Math.PI;\r\n            // 定义其在场景中的位置\r\n            this.plane.position.set(0, 0, 0);\r\n            //接收光源\r\n            this.plane.receiveShadow = true;\r\n            //添加平面到场景中\r\n            this.scene.add(this.plane);\r\n        },\r\n        //创建球体\r\n        createCube() {\r\n            // 定义方块大小\r\n            let cubeGeometry = new THREE.BoxGeometry(4, 4, 4);\r\n            //定义方块外观\r\n            let cubeMaterial = new THREE.MeshLambertMaterial({\r\n                color: 0xff0000,\r\n            });\r\n            this.cube = new THREE.Mesh(cubeGeometry, cubeMaterial);\r\n            //设置方块位置\r\n            this.cube.position.set(5, 5, 5);\r\n\r\n            this.cube.castShadow = true;\r\n            // 添加到场景中\r\n            this.scene.add(this.cube);\r\n        },\r\n        //创建球体\r\n        createSphere() {\r\n            //定义球体大小\r\n            let sphereGeometry = new THREE.SphereGeometry(4, 20, 20);\r\n            //定义球体外观\r\n            let sphereMaterial = new THREE.MeshLambertMaterial({\r\n                color: 0x7777ff,\r\n            });\r\n            this.sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);\r\n            this.sphere.position.set(-15, 5, 10);\r\n            this.sphere.castShadow = true;\r\n            this.scene.add(this.sphere);\r\n        },\r\n        //创建圆形几何体\r\n        createCircle() {\r\n            var geometry = new THREE.CircleGeometry(5, 32);\r\n            var material = new THREE.MeshLambertMaterial({ color: 0xffff00, wireframe: true });\r\n            var circle = new THREE.Mesh(geometry, material);\r\n            circle.position.set(10, 5, 10);\r\n            circle.castShadow = true;\r\n            this.scene.add(circle);\r\n        },\r\n        // 创建圆锥几何体\r\n        createCone() {\r\n            var geometry = new THREE.ConeGeometry(5, 10, 32);\r\n            var material = new THREE.MeshBasicMaterial({ color: 0xfaaf00, wireframe: true });\r\n            var cone = new THREE.Mesh(geometry, material);\r\n            cone.position.set(-10, 5, -10);\r\n            cone.castShadow = true;\r\n            this.scene.add(cone);\r\n        },\r\n        // 创建圆柱几何体\r\n        createCone1() {\r\n            var geometry = new THREE.ConeGeometry(5, 10, 32);\r\n            var material = new THREE.MeshBasicMaterial({ color: 0xfaaf00, wireframe: true });\r\n            var cone = new THREE.Mesh(geometry, material);\r\n            cone.position.set(-10, 5, -10);\r\n            cone.castShadow = true;\r\n            this.scene.add(cone);\r\n        },\r\n        //创建网格几何体\r\n        createWireframe() {\r\n            var geometry = new THREE.SphereGeometry(5, 15, 50);\r\n            var wireframe = new THREE.WireframeGeometry(geometry);\r\n            var line = new THREE.LineSegments(wireframe);\r\n            line.material.depthTest = false;\r\n            line.material.opacity = 0.25;\r\n            line.material.transparent = true;\r\n            line.position.set(-30, 5, -10);\r\n            line.castShadow = true;\r\n            this.scene.add(line);\r\n        },\r\n        //执行动画\r\n        animate() {\r\n            // stats.update();\r\n            this.cube.rotation.x += 0.03;\r\n            this.cube.rotation.y += 0.03;\r\n            this.sphere.position.x += 0.1;\r\n            if (this.sphere.position.x > 20) {\r\n                this.sphere.position.x = -20;\r\n            }\r\n            this.renderer.render(this.scene, this.camera);\r\n            requestAnimationFrame(this.animate);\r\n        },\r\n    },\r\n};\r\n</script>\r\n\r\n<style scoped lang=\"scss\"></style>\r\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./animate.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./animate.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./animate.vue?vue&type=template&id=5dbbbea1&scoped=true&\"\nimport script from \"./animate.vue?vue&type=script&lang=js&\"\nexport * from \"./animate.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"5dbbbea1\",\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}